# Default configuration for Parfis objects
# Settings are defined in key=value or key=[value1, value2, ... ] pairs, all other strings
# and controll characters are optional and are used only for initialization of Param objects.
# [] - defines list of values
# <> - defines the value type
# () - defines the range of possible values or min, max
# #  - starts comment

#------------ Domains ------------
domain = [system, particle] <parfis::Domain> (system, particle) # Domains are defined as separate classes in the code  

#------------ System ------------
system = [geometry, timestep, geometrySize, cellSize, periodicBoundary, field] <parfis::Param> # The system configuration domain  
system.geometry = cylindrical <std::string> (cylindrical) # Only cylindrical geometry is supported for now 
system.timestep = 1.0 <double> (0.0, 1.0) # Timestep is given in seconds 
system.geometrySize = [0.02, 0.02, 0.4] <double> (0.0, 1.0) # System geometry size in meters 
system.cellSize = [1e-3, 1e-3, 1e-3] <double> (0.0, 1.0) # Cell size in meters 
system.periodicBoundary = [0, 0, 0] <int> (0, 1)  # Boundary condition

#------------ Particles ------------
particle = specie <parfis::Param> (specie) # Particle parameters
particle.specie = [electron, atom] <parfis::Param> (*) # You can define specie name anyway you like 
particle.specie.electron = [statesPerCell, timestepRatio, amuMass, eCharge] <parfis::Param> # Parameters for each specie 
particle.specie.electron.statesPerCell = 10 <int>
particle.specie.electron.timestepRatio = 1 <int>
particle.specie.electron.amuMass = 0.00054858 <double>
particle.specie.electron.eCharge = -1 <int>
particle.specie.atom = [statesPerCell, timestepRatio, amuMass, eCharge] <parfis::Param>
particle.specie.atom.statesPerCell = 10 <int>
particle.specie.atom.timestepRatio = 1 <int>
particle.specie.atom.amuMass = 4 <double>
particle.specie.atom.eCharge = 0 <int>


#------------ Command Chain ------------
commandChain = [create, evolve] <parfis::CommandChain> (create, evolve) # Command chains for the program 
commandChain.create = [createCells, createStates] (createCells, createStates) <parfis::Command> # Command chain for creation of data 
commandChain.evolve = [pushStates] <parfis::Command> # Command chain for evolving the system