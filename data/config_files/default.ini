# Default configuration for Parfis objects
# Settings are defined in key=value or key=[value1, value2, ... ] pairs, all other strings
# and controll characters are optional and are used only for initialization of Param objects.
# [] - defines list of values
# <> - defines the value type
# () - defines the range of possible values or min, max
# #  - starts comment

#------------ Domains ------------
domain = [system, particle] <parfis::Domain> (system, particle) # Domains are defined as separate classes in the code  

#------------ System ------------
system = [geometry, timestep, geometrySize, cellSize, periodicBoundary, field] <parfis::Param> # The system configuration domain  
system.geometry = cylindrical <std::string> (cylindrical) # Only cylindrical geometry is supported for now 
system.timestep = 1.0 <double> (0.0, 1.0) # Timestep is given in seconds 
system.geometrySize = [0.02, 0.02, 0.4] <double> (0.0, 1.0) # System geometry size in meters 
system.cellSize = [1e-3, 1e-3, 1e-3] <double> (0.0, 1.0) # Cell size in meters 
system.periodicBoundary = [0, 0, 0] <int> (0, 1)  # Boundary condition
# Field
system.field = [typeE, typeB, strengthE, strengthB] <parfis::Param> # Field parameters
system.field.typeE = [0, 0, 0] <int> (0, 1) # Type of electric field 0: none, 1: uniform
system.field.typeB = [0, 0, 0] <int> (0, 1) # Type of magnetic field 0: none, 1: uniform
system.field.strengthE = [0, 0, 0] <double> (0, 1) # Strength of electric field in V/m
system.field.strengthB = [0, 0, 0] <double> (0, 1) # Strength of magnetic field in T
# Background gas
system.gas = [gas] <parfis::Param> # Gas parameters

#------------ Particles ------------
particle = specie <parfis::Param> (specie) # Particle parameters
particle.specie = a <parfis::Param> (*) # You can define specie name anyway you like 
particle.specie.a = [statesPerCell, timestepRatio, amuMass, eCharge, velInitRandom, velInitDistMin, velInitDistMax, randomSeed] <parfis::Param> # Parameters for each specie 
particle.specie.a.statesPerCell = 10 <int> # Number of states (particles) per cell
particle.specie.a.timestepRatio = 1 <int> # This many system.timesteps is one timestep for the specie
particle.specie.a.amuMass = 4 <double> # Mass is given in a.m.u. 
particle.specie.a.eCharge = 1 <int> # Charge is given in units of elementary charge 
particle.specie.a.velInitRandom = uniform <std::string> # Random generator for initial velocity vector 
particle.specie.a.velInitDistMin = [-0.5773502691, -0.5773502691, -0.5773502691] <double> # Array of v initial distribution minimums 
particle.specie.a.velInitDistMax = [0.5773502691, 0.5773502691, 0.5773502691] <double> # Array of v initial distribution maximums 
particle.specie.a.randomSeed = random_device <std::string> # Seed for the random engine (random_device, <int>)
# Specie collisions with gas
particle.specie.a.gasCollision = [elastic, inelastic] <parfis::Param> # Gas collision parameters

#------------ Command Chain ------------
commandChain = [create, evolve] <parfis::CommandChain> (create, evolve) # Command chains for the program 
commandChain.create = [createCells, createStates] (createCells, createStates) <parfis::Command> # Command chain for creation of data 
commandChain.evolve = [pushStates] <parfis::Command> # Command chain for evolving the system