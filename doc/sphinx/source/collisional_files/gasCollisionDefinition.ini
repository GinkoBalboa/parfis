#------------ Domains ------------
domain = [system, particle] <parfis::Domain> (system, particle)

#------------ System ------------
system = [geometry, timestep, geometrySize, cellSize, periodicBoundary, field, gas] <parfis::Param> # The system configuration domain  
system.geometry = 1 <int> # Only cylindrical geometry is supported for now  [0: cubical, 1: cylindrical]
system.timestep = 1.0e-11 <double> # Timestep is given in seconds 
system.geometrySize = [0.02, 0.02, 0.4] <double> # System geometry size in meters 
system.cellSize = [2e-3, 2e-3, 2e-3] <double> # Cell size in meters 
system.periodicBoundary = [0, 0, 0] <int>  # Boundary condition [0: wall, 1: periodic]
# Field
system.field = [typeE, typeB, strengthE, strengthB] <parfis::Param> # Field parameters
system.field.typeE = [0, 0, 0] <int> # Type of electric field [0: none, 1: uniform]
system.field.typeB = [0, 0, 0] <int> # Type of magnetic field [0: none, 1: uniform]
system.field.strengthE = [0, 0, 0] <double> # Strength of electric field in V/m
system.field.strengthB = [0, 0, 0] <double> # Strength of magnetic field in T
# Background gas
system.gas = "bck" <parfis::Param> # Gas
system.gas.bck = [amuMass, volumeFraction, temperature, molDensity] <parfis::Param> # Gas parameters
system.gas.bck.amuMass = 4.0 <double> # Gas molecular weight in a.m.u.
system.gas.bck.volumeFraction = 1.0 <double> # Volume fraction of gas
system.gas.bck.temperature = 0.0 <double> # Gas temperature in K
system.gas.bck.molDensity = 0.1660539067173 <double> # Number of moles in m^3 (equals number density/Avogadro num.)

#------------ Particles ------------
particle = specie <parfis::Param> # Particle parameters
particle.specie = "e" <parfis::Param> # Species
particle.specie.e = [statesPerCell, timestepRatio, amuMass, eCharge, velInitDist, velInitDistMin, velInitDistMax, randomSeed, gasCollision] <parfis::Param> # Parameters for each specie 
particle.specie.e.statesPerCell = 10 <int> # Number of states (particles) per cell
particle.specie.e.timestepRatio = 1 <int> # This many system.timesteps is one timestep for the specie
particle.specie.e.amuMass = 5.485799090624057e-4 <double> # Electron mass is in a.m.u. 
particle.specie.e.eCharge = -1 <int> # Charge is given in units of elementary charge
particle.specie.e.velInitDist = 0 <int> # Random generator for initial velocity vector [0: uniform]
particle.specie.e.velInitDistMin = [-0.5773502691, -0.5773502691, -0.5773502691] <double> # Array of v initial distribution minimums 
particle.specie.e.velInitDistMax = [0.5773502691, 0.5773502691, 0.5773502691] <double> # Array of v initial distribution maximums 
particle.specie.e.randomSeed = 0 <int> # Seed for the random engine (0: random device, <int>: seed]
# Specie collisions with background gas
particle.specie.e.gasCollision = ["elastic", "inelastic"] <parfis::Param> # Gas collisions
particle.specie.e.gasCollision.elastic = [type, gas, threshold, crossSectionFile] <parfis::Param> # Gas collision parameters
particle.specie.e.gasCollision.elastic.gas = "bck" <std::string> # Name of gas (defined in the system)
particle.specie.e.gasCollision.elastic.type = 0 <int> # Type of collision 0:elastic, 1:inelastic
particle.specie.e.gasCollision.elastic.threshold = 0 <double> # Threshold energy in eV
particle.specie.e.gasCollision.elastic.crossSectionFile = "./elastic.csv" <std::string> # Cross section file x: eV, y: A^2
particle.specie.e.gasCollision.inelastic = [type, gas, threshold, crossSectionFile] <parfis::Param> # Gas collision parameters 
particle.specie.e.gasCollision.inelastic.gas = "bck" <std::string> # Name of gas (defined in the system)
particle.specie.e.gasCollision.inelastic.type = 1 <int> # Type of collision 0:elastic, 1:inelastic
particle.specie.e.gasCollision.inelastic.threshold = 0.2 <double> # Threshold energy in eV
particle.specie.e.gasCollision.inelastic.crossSectionFile = "./inelastic.csv" <std::string> # Cross section file x: eV, y: A^2

#------------ Command Chain ------------
commandChain = [create, evolve] <parfis::CommandChain> # Command chains for the program 
commandChain.create = [createCells, createStates] <parfis::Command> # Command chain for creation of data 
commandChain.evolve = [pushStates] <parfis::Command> # Command chain for evolving the system